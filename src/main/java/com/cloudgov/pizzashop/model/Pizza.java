/**
 * Represents a pizza in the pizza shop menu.
 * Each pizza has a unique identifier, name, description, toppings, size options, and price.
 * Pizzas are stored in MongoDB with the collection name "pizzas".
 * 
 * Validation constraints:
 * - name: Must not be blank (handled by GlobalExceptionHandler)
 * - description: Must not be blank (handled by GlobalExceptionHandler)
 * - toppings: Must contain at least one topping (handled by GlobalExceptionHandler)
 * - sizeOptions: Must contain at least one size option (handled by GlobalExceptionHandler)
 * - price: Must not be null (handled by GlobalExceptionHandler)
 * @see com.cloudgov.pizzashop.exception.GlobalExceptionHandler
 */
package com.cloudgov.pizzashop.model;

import lombok.Data;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.util.List;
import java.util.Map;

@Data
@Document(collection = "pizzas")
public class Pizza {
    /**
     * Unique identifier for the pizza, automatically generated by MongoDB.
     */
    @Id
    private String id;
    
    /**
     * Name of the pizza (e.g., "Margherita", "Pepperoni").
     * Must not be blank.
     * Validation error: "Name is required"
     */
    @NotBlank(message = "Name is required")
    private String name;
    
    /**
     * Description of the pizza, explaining its ingredients and characteristics.
     * Must not be blank.
     * Validation error: "Description is required"
     */
    @NotBlank(message = "Description is required")
    private String description;
    
    /**
     * List of toppings included in the pizza.
     * Must contain at least one topping.
     * Validation error: "At least one topping is required"
     */
    @NotNull(message = "Toppings are required")
    @Size(min = 1, message = "At least one topping is required")
    private List<String> toppings;
    
    /**
     * Available size options for the pizza (e.g., "small", "medium", "large").
     * Must contain at least one size option.
     * Validation error: "At least one size option is required"
     */
    @NotNull(message = "Size options are required")
    @Size(min = 1, message = "At least one size option is required")
    private List<String> sizeOptions;
    
    /**
     * Price of the pizza.
     * Must not be null.
     * Validation error: "Price is required"
     */
    @NotNull(message = "Price is required")
    private Double price;
}